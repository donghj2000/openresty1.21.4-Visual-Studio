#user  nobody;
worker_processes  1;
daemon off;
master_process    off;
error_log  logs/error.log  debug;

events {
    worker_connections  1024;
}


http {
    #include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    keepalive_timeout  65;
    #test_str http_str;
    #open_file_cache max=1000 inactive=20s;
    client_header_timeout 500000;
    #client_header_buffer_size 80;

    #server {
    #    server_name localhost1;
    #    test_str server1_str;
        
    #    location /host1_loc1 {
    #        #test_str    loc1_str;
    #        root html;
    #        index index.html index.htm;
    #    }

    #    location /host1_loc2 {
    #    }
    #}

    server {
        #listen      443 ssl;
        listen       8000;
        server_name  192.168.1.6;
        #test_str server2_str;

        ssl_certificate      server.crt;
        ssl_certificate_key  server.key;
        ssl_session_timeout  5m;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        
        location /print_param {
            #root   html;
            #test_str FOCUS;
            #index  index.html index.htm;
            default_type text/html;
            lua_need_request_body on;

            content_by_lua_block {
                local arg = ngx.req.get_uri_args()
                
                for k,v in pairs(arg) do
                   ngx.say("[GET ] key:", k, " v:", v)
                end

                --ngx.req.read_body() 
                --local arg = ngx.req.get_post_args()
                --for k,v in pairs(arg) do
                --   ngx.say("[POST] key:", k, " v:", v)
                --end
            }
        }

        location /test {
            content_by_lua_block {
                local mysql = require "resty.mysql"
                local db, err = mysql:new()
                if not db then
                    ngx.say("failed to instantiate mysql:", err)
                    return
                end
                
                db:set_timeout(1000)
                
                local ok, err, errno, sqlstate = db:connect({
                    host = "127.0.0.1",
                    port = 3306,
                    database = "test_db",
                    user = "root",
                    password = "123456",
                    max_packet_size = 1024*1024
                })
                
                if not ok then
                    ngx.say("failed to connect:", err, ":", errno, "", sqlstate)
                    return
                end
                
                ngx.say("connected to mysql.")
                local res, err, errno, sqlstate = db:query("select * from pets")
            
                if not res then
                    ngx.say("bad result:", err, ":", sqlstate, ".")
                    return
                end
                ngx.say(res[0])
            }
        }
        
        location /test1 {
            content_by_lua_block {
                ngx.req.read_body()
                local args, err = ngx.req.get_uri_args()
                local data = ngx.req.get_body_data()
                local http = require "resty.http"
                local httpc = http.new()
                ngx.say("111")
                local res, err = httpc:request_uri(
                    "http://127.0.0.1:81/spe_md5",
                    {
                        method = "POST",
                        body = data,
                    }
                )
                if 200 ~= res.status then
                    ngx.exit(res.status)
                end
                
                ngx.say(res.body)
            }
        }
        location /test2 {
            content_by_lua_block {
                local json = require("cjson.safe")
                local function _json_decode(str)
                    return json.decode(str)
                end
                
                function json_decode(str)
                    local ok, t = pcall(_json_decode,str)
                    if not ok then
                        return nil
                    end
                    
                    return t
                end
                
                local str  = [[ {"key:"value"} ]]
                ngx.say("3333")
                local t = json.decode(str)

                ngx.say(" --> ", type(t))
            }
        }
        
        
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
    
    server {
        listen   81;
        
        location /spe_md5 {
            content_by_lua_block {
                ngx.req.read_body()
                ngx.say("222")
                local data = ngx.req.get_body_data()
                ngx.say(data)
                local md5degest = ngx.md5(data.."alkjsdlfjas")
                ngx.print(md5degest)
              
            }
        }
    }
}

